const _ = require('lodash');
const {scryptSync, randomBytes, createHash} = require('crypto');
const config = require('../config');
const {MongoClient, ObjectId} = require('mongodb');


class MongodbClient {
    static COLLECTION = 'users'

    constructor() {
        this.initialized = false;
        this.client = new MongoClient(config.mongoDB.url);
    }

    async find(query, options = {}) {
        return this.collection.find(query, options).toArray();
    }

    async count(query) {
        return this.collection.count(query);
    }

    async findOne(id, options = {}) {
        return this.collection.findOne(ObjectId(id), options);
    }

    async aggregate(query) {
        return this.collection.aggregate(query);
    }

    async init() {
        if (this.initialized) return console.warn(`Client already initialized!`);

        await this.client.connect();
        console.log('Connected successfully to server');
        this.db = this.client.db(config.mongoDB.db);
        this.collection = this.db.collection(MongodbClient.COLLECTION);
        await this._createIndexes();
        this.initialized = true;
    }

    async createTestData() {
        const count = await this.collection.countDocuments({})
        if (count >= config.testDataSize) return;

        const BULK_ITEMS_LIMIT = 10000;
        const countries = require('./data/countries.json');
        const countriesSlugs = Object.keys(countries);
        const citiesByCountry = _.groupBy(require('cities.json'), 'country');
        const userNames = require('./data/userNames.json');

        console.log('Start to generate test data');
        const testData = new Array(config.testDataSize - count)
            .fill(null).map(() => {
                const name = _.sample(userNames);
                const email = `${name.toLowerCase()}.${_.random(1980, 2000)}@${_.sample(['mail', 'gmail', 'yandex'])}.com`
                const countrySlug = _.sample(countriesSlugs);
                const city = _.sample(citiesByCountry[countrySlug] || citiesByCountry['UA']).name;

                // It's extremely slow for 1m autogenerated test data, so i just use sha256
                // const salt = randomBytes(8).toString('hex');
                // const hashedPassword = scryptSync(`${name}123`, salt, 64).toString('hex');
                // const password =  `${salt}:${hashedPassword}`;

                const password = createHash('sha256').update(`${name}123`).digest('hex');
                return {
                    name,
                    email,
                    password,
                    country: countries[countrySlug],
                    city,
                }
            });


        console.log(`Start insert testData`)
        while (testData.length) {
            console.log(`Left: ${testData.length}`);
            const payload = testData.splice(0, BULK_ITEMS_LIMIT);
            const bulk = await this.collection.initializeUnorderedBulkOp();
            payload.forEach(doc => bulk.insert(doc));
            await bulk.execute();
        }

        console.log("Test data is successfully inserted!")

    }

    async _createIndexes() {
        await this.collection.createIndex({
            city: 1
        }, {background: true});
        await this.collection.createIndex({
            country: 1
        }, {background: true});
        await this.collection.createIndex({
            country: 1,
            city: 1
        }, {background: true});
    }
}

module.exports = new MongodbClient();
